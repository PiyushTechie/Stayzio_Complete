<!-- Modern Flash Messages Container -->
<div class="flash-messages-container">
  <!-- Success Messages -->
  <% if (success && success.length > 0) { %>
    <div class="flash-message flash-success" role="alert" aria-live="polite">
      <div class="flash-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
          <polyline points="22,4 12,14.01 9,11.01"></polyline>
        </svg>
      </div>
      <div class="flash-content">
        <div class="flash-title">Success!</div>
        <div class="flash-message-text">
          <% success.forEach((msg, index) => { %>
            <p class="flash-message-item"><%= msg %></p>
          <% }); %>
        </div>
      </div>
      <button type="button" class="flash-close" onclick="closeFlashMessage(this)" aria-label="Close">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
  <% } %>

  <!-- Error Messages -->
  <% if (error && error.length > 0) { %>
    <div class="flash-message flash-error" role="alert" aria-live="assertive">
      <div class="flash-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="15" y1="9" x2="9" y2="15"></line>
          <line x1="9" y1="9" x2="15" y2="15"></line>
        </svg>
      </div>
      <div class="flash-content">
        <div class="flash-title">Error!</div>
        <div class="flash-message-text">
          <% error.forEach((msg, index) => { %>
            <p class="flash-message-item"><%= msg %></p>
          <% }); %>
        </div>
      </div>
      <button type="button" class="flash-close" onclick="closeFlashMessage(this)" aria-label="Close">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>
  <% } %>


<style>
/* Flash Messages Styles */
.flash-messages-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  gap: 12px;
  max-width: 420px;
  width: 100%;
}

.flash-message {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  padding: 16px 20px;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12), 0 2px 6px rgba(0, 0, 0, 0.08);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  position: relative;
  overflow: hidden;
  animation: slideInRight 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  transition: all 0.3s ease;
}

.flash-message:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15), 0 4px 8px rgba(0, 0, 0, 0.1);
}

.flash-message::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, currentColor, currentColor);
  opacity: 0.8;
}

/* Success Styles */
.flash-success {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.05) 100%);
  color: #065f46;
  border-color: rgba(16, 185, 129, 0.3);
}

.flash-success::before {
  background: linear-gradient(90deg, #10b981, #059669);
}

.flash-success .flash-icon {
  color: #10b981;
}

/* Error Styles */
.flash-error {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(220, 38, 38, 0.05) 100%);
  color: #7f1d1d;
  border-color: rgba(239, 68, 68, 0.3);
}

.flash-error::before {
  background: linear-gradient(90deg, #ef4444, #dc2626);
}

.flash-error .flash-icon {
  color: #ef4444;
}

.flash-info .flash-icon {
  color: #3b82f6;
}

.flash-icon {
  flex-shrink: 0;
  margin-top: 2px;
}

.flash-content {
  flex: 1;
  min-width: 0;
}

.flash-title {
  font-weight: 600;
  font-size: 14px;
  margin-bottom: 4px;
  letter-spacing: -0.025em;
}

.flash-message-text {
  font-size: 13px;
  line-height: 1.5;
  opacity: 0.9;
}

.flash-message-item {
  margin: 0;
  margin-bottom: 4px;
}

.flash-message-item:last-child {
  margin-bottom: 0;
}

.flash-close {
  flex-shrink: 0;
  background: none;
  border: none;
  padding: 4px;
  cursor: pointer;
  border-radius: 6px;
  opacity: 0.7;
  transition: all 0.2s ease;
  margin-top: -2px;
}

.flash-close:hover {
  opacity: 1;
  background: rgba(0, 0, 0, 0.1);
  transform: rotate(90deg);
}

.flash-close svg {
  display: block;
}

/* Animations */
@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(100%) scale(0.8);
  }
  to {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
}

@keyframes slideOutRight {
  from {
    opacity: 1;
    transform: translateX(0) scale(1);
    max-height: 200px;
    margin-bottom: 12px;
  }
  to {
    opacity: 0;
    transform: translateX(100%) scale(0.8);
    max-height: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
  }
}

.flash-message.closing {
  animation: slideOutRight 0.3s ease forwards;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .flash-success {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.15) 0%, rgba(5, 150, 105, 0.08) 100%);
    color: #a7f3d0;
    border-color: rgba(16, 185, 129, 0.4);
  }

  .flash-error {
    background: linear-gradient(135deg, rgba(239, 68, 68, 0.15) 0%, rgba(220, 38, 38, 0.08) 100%);
    color: #fecaca;
    border-color: rgba(239, 68, 68, 0.4);
  }



  .flash-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }
}

/* Responsive */
@media (max-width: 768px) {
  .flash-messages-container {
    top: 10px;
    right: 10px;
    left: 10px;
    max-width: none;
  }

  .flash-message {
    padding: 14px 16px;
  }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .flash-message {
    animation: none;
  }
  
  .flash-message:hover {
    transform: none;
  }
  
  .flash-close:hover {
    transform: none;
  }
}
</style>

<script>
// Flash message functionality
function closeFlashMessage(button) {
  const flashMessage = button.closest('.flash-message');
  
  // Add closing animation
  flashMessage.classList.add('closing');
  
  // Remove element after animation completes
  setTimeout(() => {
    flashMessage.remove();
  }, 300);
}

// Auto-hide messages after 5 seconds
document.addEventListener('DOMContentLoaded', function() {
  const flashMessages = document.querySelectorAll('.flash-message');
  
  flashMessages.forEach((message, index) => {
    // Stagger the auto-hide timing
    setTimeout(() => {
      if (message.parentNode) {
        const closeButton = message.querySelector('.flash-close');
        if (closeButton) {
          closeFlashMessage(closeButton);
        }
      }
    }, 5000 + (index * 500)); // 5s base + 0.5s per additional message
  });
});

// Pause auto-hide on hover
document.addEventListener('DOMContentLoaded', function() {
  const flashMessages = document.querySelectorAll('.flash-message');
  
  flashMessages.forEach(message => {
    let autoHideTimeout;
    
    const startAutoHide = () => {
      autoHideTimeout = setTimeout(() => {
        if (message.parentNode) {
          const closeButton = message.querySelector('.flash-close');
          if (closeButton) {
            closeFlashMessage(closeButton);
          }
        }
      }, 5000);
    };
    
    const stopAutoHide = () => {
      clearTimeout(autoHideTimeout);
    };
    
    message.addEventListener('mouseenter', stopAutoHide);
    message.addEventListener('mouseleave', startAutoHide);
    
    // Start initial auto-hide
    startAutoHide();
  });
});
</script>